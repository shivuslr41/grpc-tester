[
    {
        "server": "localhost:8001",
        "endpoint": "greeter.Greeter.SayHello",
        "tests": [
            {
                "id": "sayhello-1",
                "description": "print hello world",
                "requests": [
                    {
                        "name": "World"
                    }
                ],
                "print": true,
                "grpcurl_flags": "-emit-defaults -H \"Authorization: abcd\""
            },
            {
                "id": "sayhello-2",
                "description": "test hello earth and extract result",
                "requests": [
                    {
                        "name": "Earth"
                    }
                ],
                "compare": true,
                "expectations": [
                    {
                        "message": "Hello Earth!"
                    }
                ],
                "extract":[
                    ".[0].message"
                ],
                "extract_to":[
                    "name_from_another_request"
                ]
            },
            {
                "id": "sayhello-3",
                "description": "test hello world with filters",
                "requests": [
                    {
                        "name": "World"
                    }
                ],
                "compare": true,
                "jqq": [
                    "'[.[].message]'"
                ],
                "expectations": [
                    "Hello World!"
                ]
            },
            {
                "id": "sayhello-skip",
                "description": "skip this test, since this is same as above one!",
                "requests": [
                    {
                        "name": "World"
                    }
                ],
                "compare": true,
                "jqq": [
                    "'.[].message'",
                    "[.]"
                ],
                "expectations": [
                    "Hello World!"
                ],
                "skip": true
            }
        ]
    },
    {
        "server": "localhost:8001",
        "endpoint": "greeter.Greeter.SayHelloStream",
        "stream_payload": true,
        "tests": [
            {
                "id": "sayhellostream-1",
                "description": "print hello world and earth",
                "requests": [
                    {
                        "name": "World"
                    },
                    {
                        "name": "Earth"
                    }
                ],
                "print": true
            },
            {
                "id": "sayhellostream-2",
                "description": "test hello world and earth",
                "requests": [
                    {
                        "name": "World"
                    },
                    {
                        "name": "Earth"
                    }
                ],
                "compare": true,
                "expectations": [
                    {
                        "message": "Hello Earth!"
                    },
                    {
                        "message": "Hello World!"
                    }
                ],
                "ignore_order": true
            },
            {
                "id": "sayhellostream-3",
                "description": "test hello world and replace hello earth from extracted value along with filters, capture all stream messages in \"messages\" array",
                "requests": [
                    {
                        "name": "World"
                    },
                    {
                        "name": "replace_here"
                    }
                ],
                "compare": true,
                "jqq": [
                    "'[.[].message] | [{messages: .}]'"
                ],
                "expectations": [
                    {
                        "messages": [
                            "Hello World!",
                            "Hello Hello Earth!!"
                        ]
                    }
                ],
                "replace":[
                    "(.[1] | select(.name == \"replace_here\")).name"
                ],
                "replace_from":[
                    "name_from_another_request"
                ]
            }
        ]
    }
]
